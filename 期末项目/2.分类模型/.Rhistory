#经过调整模型变量
fit2=glm(Survived~Pclass+Sex+Age+Familynum+TicketCount,data=train_data,family =binomial())
summary(fit2)
#30%的训练集数据用来验证模型
set.seed(123)
par <- createDataPartition(titanic_data$Survived,times = 1,p=0.3,list = F)
#30%的训练集数据用来验证模型
set.seed(123)
par <- createDataPartition(titanic_data$Survived,times = 1,p=0.3,list = F)
# 导入必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
library(mice)
library(caret)
# 读取数据
titanic_data <- read.csv("titanic.csv")
#转换数据类型
titanic_data$Survived<-as.factor(titanic_data$Survived)
titanic_data$Sex<-as.factor(titanic_data$Sex)
titanic_data$SibSp<-as.numeric(titanic_data$SibSp)
titanic_data$Parch<-as.numeric(titanic_data$Parch)
#数据预处理
summary(titanic_data)
#查找缺失值
sapply(titanic_data, function(x) sum(is.na(x)))
#查找空值
sapply(titanic_data, function(x) sum(x==""))
#确定空值对应行数的变量Pclass,Fare
titanic_data[which(titanic_data$Embarked==""),c("Pclass","Fare")]
filter1<-titanic_data[which(titanic_data$Pclass=="1"),c("Fare","Pclass","Embarked")]
S_fare<-median(filter1$Fare[which(filter1$Embarked=="S")])
C_fare<-median(filter1$Fare[which(filter1$Embarked=="C")])
Q_fare<-median(filter1$Fare[which(filter1$Embarked=="Q")])
S_fare
C_fare
Q_fare
titanic_data$Embarked[c(62,830)]<-"C"
titanic_data$Cabin<-NULL
#插补缺失值
tempdata<-mice(titanic_data[,!names(titanic_data)%in%c('PassengerId','Ticket','Survived','Name')],method ="pmm")
completedata<-complete(tempdata)
sapply(completedata,function(x) sum(is.na(x)))
sapply(completedata,function(x) sum(x==""))
#作图比较数据特征
par(mfrow=c(1,2))  #设置图形的放置
hist(titanic_data$Age,freq = F,main='originaldata Age',ylim=c(0,0.04))
hist(completedata$Age,freq = F,main='completedata Age',ylim=c(0,0.04) )
par(mfrow=c(1,1)) #恢复一行一个图形的设置
titanic_data$Age<-completedata$Age
ggplot(titanic_data,mapping = aes(x=Pclass,y=after_stat(count),fill=Survived))+
geom_bar(stat = "count",position = "dodge")+
labs(title="Effect of Pclass on survival",x="Pclass",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(0.9),vjust=0)
titanic_data$Title<-gsub("(.*,)|(\\..*)","",titanic_data$Name) #利用正则表达式把姓名中的头衔分列出来
rare<-names(which(table(titanic_data$Title)<10))#由于较少的头衔不具有代表性，所以将头衔个数小于10的筛选出来
titanic_data$Title[titanic_data$Title %in% rare]<-"rare_title" #同一头衔个数小于10的，全部改为rare_title
titanic_data$Title<-as.factor(titanic_data$Title)
summary(titanic_data$Title)
ggplot(titanic_data,mapping = aes(x=Title,y=after_stat(count),fill=Survived))+
geom_bar(stat = "count",position = "dodge")+
labs(title="The effect of Name(Title) on survival" ,x="Title",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position = position_dodge(0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Sex,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Sex on survival",x="Sex",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Age,y=after_stat(count),color=Survived))+
geom_line(aes(label=after_stat(count)), stat = 'bin', binwidth=3)  +
labs(title = "The effect of Age on survival", x = "Age", y = "Count")
titanic_data$AgeState[titanic_data$Age<18]<-"Child"
titanic_data$AgeState[titanic_data$Age>=18]<-"Adult"
ggplot(titanic_data,mapping = aes(x=AgeState,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of AgeState on survival",x="AgeState",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=SibSp,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Sibsp on survival",x="Sibsp",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Parch,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Parch on survival",x="Parch",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
titanic_data$Familynum<-titanic_data$SibSp+titanic_data$Parch
ggplot(titanic_data,mapping = aes(x=Familynum,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Familynum on survival",x="Familynum",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ticket.count<-aggregate(titanic_data$Ticket,by=list(titanic_data$Ticket),function(x) sum(!is.na(x)))
titanic_data$TicketCount <- apply(titanic_data, 1, function(x) ticket.count[which(ticket.count[, 1] == x['Ticket']), 2])
titanic_data$TicketCount<-factor(sapply(titanic_data$TicketCount,function(x) ifelse(x>1,"share","unique")))
ggplot(titanic_data,mapping = aes(x=TicketCount,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of TicketCount on survival",x="TicketCount",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,aes(x=Fare,y=after_stat(count),color=Survived))+
geom_line(aes(label=after_stat(count)),stat = "bin",binwidth=5)+
ggtitle("The effect of Fare on survival")
ggplot(titanic_data,mapping = aes(x=Embarked,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Embarked on survival",x="Embarked",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
#选择特征用来建模
cols_selected<-c("Survived","Pclass","Sex","Age","Fare","Embarked","AgeState","Familynum","TicketCount")
train_data<-titanic_data[,colnames(titanic_data) %in% cols_selected]
summary(train_data)
#建模
fit1=glm(Survived~.,data=train_data,family =binomial())
summary(fit1)
#经过调整模型变量
fit2=glm(Survived~Pclass+Sex+Age+Familynum+TicketCount,data=train_data,family =binomial())
summary(fit2)
#30%的训练集数据用来验证模型
set.seed(123)
par <- createDataPartition(titanic_data$Survived,times = 1,p=0.3,list = F)
test_data <- titanic_data[par,]
#模型质量评估
####预测准确率
pred <- predict(fit2,test_data[1:nrow(test_data),],type = "response")
fittedresults<-ifelse(pred>0.5,1,0);
Error<-sum(factor(fittedresults)!=test_data$Survived)/nrow(test_data)
Error
#计算模型系数的指数，即各变量的几率比。
exp(coef(fit2))
# 导入必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
library(mice)
library(caret)
# 读取数据
titanic_data <- read.csv("titanic.csv")
#转换数据类型
titanic_data$Survived<-as.factor(titanic_data$Survived)
titanic_data$Sex<-as.factor(titanic_data$Sex)
titanic_data$SibSp<-as.numeric(titanic_data$SibSp)
titanic_data$Parch<-as.numeric(titanic_data$Parch)
#数据预处理
summary(titanic_data)
#查找缺失值
sapply(titanic_data, function(x) sum(is.na(x)))
#查找空值
sapply(titanic_data, function(x) sum(x==""))
#确定空值对应行数的变量Pclass,Fare
titanic_data[which(titanic_data$Embarked==""),c("Pclass","Fare")]
filter1<-titanic_data[which(titanic_data$Pclass=="1"),c("Fare","Pclass","Embarked")]
S_fare<-median(filter1$Fare[which(filter1$Embarked=="S")])
C_fare<-median(filter1$Fare[which(filter1$Embarked=="C")])
Q_fare<-median(filter1$Fare[which(filter1$Embarked=="Q")])
S_fare
C_fare
Q_fare
titanic_data$Embarked[c(62,830)]<-"C"
titanic_data$Cabin<-NULL
#插补缺失值
tempdata<-mice(titanic_data[,!names(titanic_data)%in%c('PassengerId','Ticket','Survived','Name')],method ="pmm")
completedata<-complete(tempdata)
sapply(completedata,function(x) sum(is.na(x)))
sapply(completedata,function(x) sum(x==""))
#作图比较数据特征
par(mfrow=c(1,2))  #设置图形的放置
hist(titanic_data$Age,freq = F,main='originaldata Age',ylim=c(0,0.04))
hist(completedata$Age,freq = F,main='completedata Age',ylim=c(0,0.04) )
par(mfrow=c(1,1)) #恢复一行一个图形的设置
titanic_data$Age<-completedata$Age
ggplot(titanic_data,mapping = aes(x=Pclass,y=after_stat(count),fill=Survived))+
geom_bar(stat = "count",position = "dodge")+
labs(title="Effect of Pclass on survival",x="Pclass",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(0.9),vjust=0)
titanic_data$Title<-gsub("(.*,)|(\\..*)","",titanic_data$Name) #利用正则表达式把姓名中的头衔分列出来
rare<-names(which(table(titanic_data$Title)<10))#由于较少的头衔不具有代表性，所以将头衔个数小于10的筛选出来
titanic_data$Title[titanic_data$Title %in% rare]<-"rare_title" #同一头衔个数小于10的，全部改为rare_title
titanic_data$Title<-as.factor(titanic_data$Title)
summary(titanic_data$Title)
ggplot(titanic_data,mapping = aes(x=Title,y=after_stat(count),fill=Survived))+
geom_bar(stat = "count",position = "dodge")+
labs(title="The effect of Name(Title) on survival" ,x="Title",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position = position_dodge(0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Sex,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Sex on survival",x="Sex",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Age,y=after_stat(count),color=Survived))+
geom_line(aes(label=after_stat(count)), stat = 'bin', binwidth=3)  +
labs(title = "The effect of Age on survival", x = "Age", y = "Count")
titanic_data$AgeState[titanic_data$Age<18]<-"Child"
titanic_data$AgeState[titanic_data$Age>=18]<-"Adult"
ggplot(titanic_data,mapping = aes(x=AgeState,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of AgeState on survival",x="AgeState",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=SibSp,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Sibsp on survival",x="Sibsp",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Parch,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Parch on survival",x="Parch",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
titanic_data$Familynum<-titanic_data$SibSp+titanic_data$Parch
ggplot(titanic_data,mapping = aes(x=Familynum,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Familynum on survival",x="Familynum",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ticket.count<-aggregate(titanic_data$Ticket,by=list(titanic_data$Ticket),function(x) sum(!is.na(x)))
titanic_data$TicketCount <- apply(titanic_data, 1, function(x) ticket.count[which(ticket.count[, 1] == x['Ticket']), 2])
titanic_data$TicketCount<-factor(sapply(titanic_data$TicketCount,function(x) ifelse(x>1,"share","unique")))
ggplot(titanic_data,mapping = aes(x=TicketCount,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of TicketCount on survival",x="TicketCount",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,aes(x=Fare,y=after_stat(count),color=Survived))+
geom_line(aes(label=after_stat(count)),stat = "bin",binwidth=5)+
ggtitle("The effect of Fare on survival")
ggplot(titanic_data,mapping = aes(x=Embarked,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Embarked on survival",x="Embarked",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
#选择特征用来建模
cols_selected<-c("Survived","Pclass","Sex","Age","Fare","Embarked","AgeState","Familynum","TicketCount")
train_data<-titanic_data[,colnames(titanic_data) %in% cols_selected]
summary(train_data)
#建模
fit1=glm(Survived~.,data=train_data,family =binomial())
summary(fit1)
#经过调整模型变量
fit2=glm(Survived~Pclass+Sex+Age+Familynum+TicketCount,data=train_data,family =binomial())
summary(fit2)
#30%的训练集数据用来验证模型
set.seed(123)
par <- createDataPartition(titanic_data$Survived,times = 1,p=0.3,list = F)
test_data <- titanic_data[par,]
#模型质量评估
####预测准确率
pred <- predict(fit2,test_data[1:nrow(test_data),],type = "response")
fittedresults<-ifelse(pred>0.5,1,0);
Error<-sum(factor(fittedresults)!=test_data$Survived)/nrow(test_data)
Error
#计算模型系数的指数，即各变量的几率比。
exp(coef(fit2))
# 导入必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
library(mice)
library(caret)
# 读取数据
titanic_data <- read.csv("titanic.csv")
#转换数据类型
titanic_data$Survived<-as.factor(titanic_data$Survived)
titanic_data$Sex<-as.factor(titanic_data$Sex)
titanic_data$SibSp<-as.numeric(titanic_data$SibSp)
titanic_data$Parch<-as.numeric(titanic_data$Parch)
#数据预处理
summary(titanic_data)
#查找缺失值
sapply(titanic_data, function(x) sum(is.na(x)))
#查找空值
sapply(titanic_data, function(x) sum(x==""))
#确定空值对应行数的变量Pclass,Fare
titanic_data[which(titanic_data$Embarked==""),c("Pclass","Fare")]
filter1<-titanic_data[which(titanic_data$Pclass=="1"),c("Fare","Pclass","Embarked")]
S_fare<-median(filter1$Fare[which(filter1$Embarked=="S")])
C_fare<-median(filter1$Fare[which(filter1$Embarked=="C")])
Q_fare<-median(filter1$Fare[which(filter1$Embarked=="Q")])
S_fare
C_fare
Q_fare
titanic_data$Embarked[c(62,830)]<-"C"
titanic_data$Cabin<-NULL
#插补缺失值
tempdata<-mice(titanic_data[,!names(titanic_data)%in%c('PassengerId','Ticket','Survived','Name')],method ="pmm")
completedata<-complete(tempdata)
sapply(completedata,function(x) sum(is.na(x)))
sapply(completedata,function(x) sum(x==""))
#作图比较数据特征
par(mfrow=c(1,2))  #设置图形的放置
hist(titanic_data$Age,freq = F,main='originaldata Age',ylim=c(0,0.04))
hist(completedata$Age,freq = F,main='completedata Age',ylim=c(0,0.04) )
par(mfrow=c(1,1)) #恢复一行一个图形的设置
titanic_data$Age<-completedata$Age
ggplot(titanic_data,mapping = aes(x=Pclass,y=after_stat(count),fill=Survived))+
geom_bar(stat = "count",position = "dodge")+
labs(title="Effect of Pclass on survival",x="Pclass",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(0.9),vjust=0)
titanic_data$Title<-gsub("(.*,)|(\\..*)","",titanic_data$Name) #利用正则表达式把姓名中的头衔分列出来
rare<-names(which(table(titanic_data$Title)<10))#由于较少的头衔不具有代表性，所以将头衔个数小于10的筛选出来
titanic_data$Title[titanic_data$Title %in% rare]<-"rare_title" #同一头衔个数小于10的，全部改为rare_title
titanic_data$Title<-as.factor(titanic_data$Title)
summary(titanic_data$Title)
ggplot(titanic_data,mapping = aes(x=Title,y=after_stat(count),fill=Survived))+
geom_bar(stat = "count",position = "dodge")+
labs(title="The effect of Name(Title) on survival" ,x="Title",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position = position_dodge(0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Sex,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Sex on survival",x="Sex",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Age,y=after_stat(count),color=Survived))+
geom_line(aes(label=after_stat(count)), stat = 'bin', binwidth=3)  +
labs(title = "The effect of Age on survival", x = "Age", y = "Count")
titanic_data$AgeState[titanic_data$Age<18]<-"Child"
titanic_data$AgeState[titanic_data$Age>=18]<-"Adult"
ggplot(titanic_data,mapping = aes(x=AgeState,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of AgeState on survival",x="AgeState",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=SibSp,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Sibsp on survival",x="Sibsp",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,mapping = aes(x=Parch,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Parch on survival",x="Parch",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
titanic_data$Familynum<-titanic_data$SibSp+titanic_data$Parch
ggplot(titanic_data,mapping = aes(x=Familynum,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Familynum on survival",x="Familynum",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ticket.count<-aggregate(titanic_data$Ticket,by=list(titanic_data$Ticket),function(x) sum(!is.na(x)))
titanic_data$TicketCount <- apply(titanic_data, 1, function(x) ticket.count[which(ticket.count[, 1] == x['Ticket']), 2])
titanic_data$TicketCount<-factor(sapply(titanic_data$TicketCount,function(x) ifelse(x>1,"share","unique")))
ggplot(titanic_data,mapping = aes(x=TicketCount,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of TicketCount on survival",x="TicketCount",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
ggplot(titanic_data,aes(x=Fare,y=after_stat(count),color=Survived))+
geom_line(aes(label=after_stat(count)),stat = "bin",binwidth=5)+
ggtitle("The effect of Fare on survival")
ggplot(titanic_data,mapping = aes(x=Embarked,y=after_stat(count),fill=Survived))+
geom_bar(stat="count",position = "dodge")+
labs(title="The effect of Embarked on survival",x="Embarked",y="count")+
geom_text(stat="count",aes(label=after_stat(count)),position =position_dodge(width = 0.9),vjust=0)
#选择特征用来建模
cols_selected<-c("Survived","Pclass","Sex","Age","Fare","Embarked","AgeState","Familynum","TicketCount")
train_data<-titanic_data[,colnames(titanic_data) %in% cols_selected]
summary(train_data)
#建模
fit1=glm(Survived~.,data=train_data,family =binomial())
summary(fit1)
#经过调整模型变量
fit2=glm(Survived~Pclass+Sex+Age+Familynum+TicketCount,data=train_data,family =binomial())
summary(fit2)
#30%的训练集数据用来验证模型
set.seed(123)
par <- createDataPartition(titanic_data$Survived,times = 1,p=0.3,list = F)
test_data <- titanic_data[par,]
#模型质量评估
####预测准确率
pred <- predict(fit2,test_data[1:nrow(test_data),],type = "response")
fittedresults<-ifelse(pred>0.5,1,0);
Error<-sum(factor(fittedresults)!=test_data$Survived)/nrow(test_data)
Error
#计算模型系数的指数，即各变量的几率比。
exp(coef(fit2))
