geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = title_text,
x = x_var,
y = y_var)
}
# 依次创建男女生小学、初中、高中教育完成率散点图
plot_base(edu_data, "Completion_Rate_Primary_Male", "Completion_Rate_Primary_Female", "男女生小学教育完成率")
plot_base(edu_data, "Completion_Rate_Lower_Secondary_Male", "Completion_Rate_Lower_Secondary_Female", "男女生初中教育完成率")
plot_base(edu_data, "Completion_Rate_Upper_Secondary_Male", "Completion_Rate_Upper_Secondary_Female", "男女生高中教育完成率")
# 创建基础散点图函数
plot_base <- function(data, x_var, y_var, title_text) {
ggplot(data, aes(x = !!sym(x_var), y = !!sym(y_var))) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
labs(title = title_text,
x = x_var,
y = y_var)
}
# 依次创建二三年级、小学、初中阅读和数学能力分析散点图
plot_base(edu_data, "Grade_2_3_Proficiency_Reading", "Grade_2_3_Proficiency_Math", "二三年级阅读和数学能力")
plot_base(edu_data, "Primary_End_Proficiency_Reading", "Primary_End_Proficiency_Math", "小学阅读和数学能力")
plot_base(edu_data, "Lower_Secondary_End_Proficiency_Reading", "Lower_Secondary_End_Proficiency_Math", "初中阅读和数学能力")
# 创建散点图
ggplot(edu_data, aes(x = Gross_Primary_Education_Enrollment, y = Gross_Tertiary_Education_Enrollment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "基础教育入学率与高等教育入学率关系",
x = "基础教育入学率",
y = "高等教育入学率")
# 绘制散点图分析高中教育完成率与高等教育入学率的关系
ggplot(edu_data, aes(x = Average_Completion_Rate_Upper_Secondary, y = Gross_Tertiary_Education_Enrollment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "高中教育完成率与高等教育入学率",
x = "高中教育完成率",
y = "高等教育入学率")
# 绘制散点图分析高中辍学率与高等教育入学率的关系
ggplot(edu_data, aes(x = Average_OOSR_Upper_Secondary_Age, y = Gross_Tertiary_Education_Enrollment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "高中辍学率与高等教育入学率",
x = "高中辍学率",
y = "高等教育入学率")
# 绘制散点图分析15-24岁学生读写能力与高等教育入学率的关系
ggplot(edu_data, aes(x = Average_Youth_15_24_Literacy_Rate, y = Gross_Tertiary_Education_Enrollment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "15-24岁学生读写能力与高等教育入学率",
x = "15-24岁学生读写能力",
y = "高等教育入学率")
ggplot(edu_data, aes(x = Birth_Rate, y = Gross_Tertiary_Education_Enrollment)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "出生率与高等教育入学率",
x = "出生率",
y = "高等教育入学率")
# 绘制散点图分析平均初中教育完成率与失业率的关系
ggplot(edu_data, aes(x = Average_Completion_Rate_Lower_Secondary, y = Unemployment_Rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "初中教育完成率与失业率",
x = "初中教育完成率",
y = "失业率")
ggplot(edu_data, aes(x = Gross_Tertiary_Education_Enrollment, y = Unemployment_Rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "高等教育入学率与失业率",
x = "高等教育入学率",
y = "失业率")
# 绘制散点图分析初中辍学率与失业率的关系
ggplot(edu_data, aes(x = Average_OOSR_Lower_Secondary_Age, y = Unemployment_Rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "初中辍学率与失业率",
x = "初中辍学率",
y = "失业率")
ggplot(edu_data, aes(x = Average_Youth_15_24_Literacy_Rate, y = Unemployment_Rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "15-24岁学生读写能力与失业率",
x = "15-24岁学生读写能力",
y = "失业率")
ggplot(edu_data, aes(x = Birth_Rate, y = Unemployment_Rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "出生率与失业率",
x = "出生率",
y = "失业率")
ggplot(edu_data, aes(x = Longitude, y = Latitude)) +
geom_point(aes(size = Unemployment_Rate, color = Unemployment_Rate), alpha = 0.5) +
scale_size_continuous(range = c(1, 8)) +  # 调整大小
scale_color_gradient(low = "white", high = "red") +  # 调整颜色
labs(title = "地理位置与失业率",
x = "经度",
y = "纬度",
size = "失业率",
color = "失业率") +
theme_minimal()
ggplot(edu_data, aes(x = Longitude, y = Unemployment_Rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "经度与失业率",
x = "经度",
y = "失业率")
ggplot(edu_data, aes(x = Latitude, y = Unemployment_Rate)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "纬度与失业率",
x = "纬度",
y = "失业率")
# 划分训练数据集以及测试数据集
trainIndex1 <- createDataPartition(edu_data$Gross_Tertiary_Education_Enrollment, p = 0.8, list = FALSE)
train_data1 <- edu_data[trainIndex1, ]
test_data1 <- edu_data[-trainIndex1, ]
# 初步建立线性回归模型
model1 <- lm(Gross_Tertiary_Education_Enrollment ~ Latitude + Longitude +
Average_OOSR_Pre0Primary_Age + Average_OOSR_Primary_Age +
Average_OOSR_Lower_Secondary_Age + Average_OOSR_Upper_Secondary_Age +
Gross_Primary_Education_Enrollment + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary +
Average_Youth_15_24_Literacy_Rate + Birth_Rate,
data = train_data1)
summary(model1)
#筛选变量、优化模型
model2 <- lm(Gross_Tertiary_Education_Enrollment ~ Latitude + Longitude +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Lower_Secondary +
Average_Completion_Rate_Upper_Secondary + Birth_Rate +
Average_Youth_15_24_Literacy_Rate,
data = train_data1)
summary(model2)
# 使用测试集进行预测
predictions1 <- predict(model2, test_data1)
# 绘制残差图
plot(model2$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error1 <- sqrt(mean((test_data1$Gross_Tertiary_Education_Enrollment - predictions1)^2))
print(test_error1)
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
#summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
# plot(model4$residuals)
# abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
# plot(model4$residuals)
# abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
# plot(model4$residuals)
# abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
# plot(model4$residuals)
# abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_Completion_Rate_Primary + Average_Completion_Rate_Lower_Secondary +
Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
# plot(model4$residuals)
# abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_Completion_Rate_Primary + Average_Completion_Rate_Lower_Secondary +
Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
# plot(model4$residuals)
# abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_Completion_Rate_Primary + Average_Completion_Rate_Lower_Secondary +
Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_Completion_Rate_Primary + Average_Completion_Rate_Lower_Secondary +
Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_Completion_Rate_Primary + Average_Completion_Rate_Lower_Secondary +
Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_Completion_Rate_Primary + Average_Completion_Rate_Lower_Secondary +
Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
# 划分训练数据集以及测试数据集
trainIndex2 <- createDataPartition(edu_data$Unemployment_Rate, p = 0.8, list = FALSE)
train_data2 <- edu_data[trainIndex2, ]
test_data2 <- edu_data[-trainIndex2, ]
# 初步建立线性回归模型
model3 <- lm(Unemployment_Rate ~ Longitude + Average_OOSR_Pre0Primary_Age +
Average_OOSR_Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_OOSR_Upper_Secondary_Age + Average_Completion_Rate_Primary +
Average_Completion_Rate_Lower_Secondary + Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model3)
#筛选变量、优化模型
model4 <- lm(Unemployment_Rate ~ Average_OOSR_Pre0Primary_Age + Average_OOSR_Lower_Secondary_Age +
Average_Completion_Rate_Primary + Average_Completion_Rate_Lower_Secondary +
Average_Completion_Rate_Upper_Secondary,
data = train_data2)
summary(model4)
# 使用测试集进行预测
predictions2 <- predict(model4, test_data2)
# 绘制残差图
plot(model4$residuals)
abline(h = 0, col = "red")
# 计算均方根误差
test_error2 <- sqrt(mean((test_data2$Unemployment_Rate - predictions2)^2))
print(test_error2)
