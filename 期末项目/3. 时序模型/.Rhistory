diff_ts <- ts_data
diff_count <- 0
repeat {
adf_test_results <- adf.test(diff_ts, alternative = "stationary")
if (adf_test_results$p.value < 0.05) {
break
} else {
diff_ts <- diff(diff_ts)
diff_count <- diff_count + 1
}
if (diff_count > 10) {
break
}
}
# 将差分后的时间序列转换为普通向量
diff_ts_vector <- as.vector(diff_ts)
# 调整Date向量以匹配差分后的时间序列长度
adjusted_dates <- company_data$Date[-seq_len(diff_count)]
# 将差分后的数据添加到数据框
diff_stock_data <- rbind(diff_stock_data, data.frame(Date = adjusted_dates, Company = company, DiffClose = diff_ts_vector))
}
# 查看结果
head(diff_stock_data)
library(forecast)
library(dplyr)
library(tseries)
company_list <- unique(diff_stock_data$Company)
company_forecasts <- list()
for (company in company_list) {
company_data <- filter(diff_stock_data, Company == company)
# 反转时间序列，使得最新的数据在最后
ts_data <- ts(rev(company_data$DiffClose))
# 检查数据是否平稳
if (adf.test(ts_data, alternative = "stationary")$p.value > 0.05) {
ts_data <- diff(ts_data, differences = 1)
}
# 设置训练集和测试集的大小
train_size <- floor(length(ts_data) * 0.85)
train_set <- ts_data[1:train_size]
test_set <- ts_data[(train_size + 1):length(ts_data)]
if (length(test_set) > 0) {
fit <- auto.arima(train_set, stepwise = FALSE, approximation = FALSE)
forecast_result <- forecast(fit, h = length(test_set))
company_forecasts[[company]] <- list(
Model = fit,
Forecast = forecast_result,
Accuracy = if (length(forecast_result$mean) == length(test_set)) {
accuracy(forecast_result, test_set)
} else {
NA
}
)
} else {
company_forecasts[[company]] <- list(
Model = NA,
Forecast = NA,
Accuracy = NA
)
}
}
# 打印每个公司的预测结果
for (company in company_list) {
forecast_info <- company_forecasts[[company]]
cat("公司:", company, "\n")
cat("模型信息:\n")
print(forecast_info$Model)
cat("预测结果:\n")
print(forecast_info$Forecast)
cat("精度信息:\n")
print(forecast_info$Accuracy)
cat("\n")
}
library(forecast)
library(dplyr)
library(tseries)
company_list <- unique(diff_stock_data$Company)
company_forecasts <- list()
window_size <- 30  # 窗口大小，可以根据需要调整
forecast_length <- 1  # 预测步长，通常为1
for (company in company_list) {
company_data <- filter(diff_stock_data, Company == company)
ts_data <- ts(rev(company_data$DiffClose))
# 确保时间序列是平稳的
if (adf.test(ts_data, alternative = "stationary")$p.value > 0.05) {
ts_data <- diff(ts_data, differences = 1)
}
total_length <- length(ts_data)
forecasts <- list()
for (start in seq(1, total_length - window_size - forecast_length)) {
train_set <- ts_data[start:(start + window_size - 1)]
fit <- auto.arima(train_set, stepwise = FALSE, approximation = FALSE)
forecast_result <- forecast(fit, h = forecast_length)
forecasts[[start]] <- forecast_result
}
company_forecasts[[company]] <- forecasts
}
# 打印每个公司的预测结果
for (company in company_list) {
cat("公司:", company, "\n")
forecasts <- company_forecasts[[company]]
for (f in forecasts) {
cat("预测结果:\n")
print(f)
}
cat("\n")
}
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理：统一日期格式
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
# 清理并转换股票价格和交易量数据：将价格变成数据
price_columns <- c("Close.Last", "Open", "High", "Low")
for (col in price_columns) {
stock_data[[col]] <- as.numeric(gsub("\\$", "", stock_data[[col]]))
}
stock_data$Volume <- as.numeric(gsub(",", "", stock_data$Volume))
# 处理缺失值
# 这里的策略是删除任何包含缺失值的行
stock_data <- na.omit(stock_data)
# 处理异常值，保证所有数据都是非负数
stock_data <- stock_data %>%
filter(Close.Last > 0, Open > 0, High > 0, Low > 0, Volume > 0)
# 数据去重
stock_data <- distinct(stock_data)
# 只关心'Company'和'Date'列的重复值
stock_data <- distinct(stock_data, Company, Date, .keep_all = TRUE)
#计算每天股票的涨幅
stock_data <- stock_data %>%
mutate(increaseRate = (Close.Last - Open) / Open)
# 为每个公司绘制箱线图（以'Close.Last'为例）
ggplot(stock_data, aes(x = Company, y = Close.Last)) +
geom_boxplot() +
labs(title = "Boxplot of Closing Prices for Each Company", x = "Company", y = "Close/Last Price")
ggplot(stock_data, aes(x = Company, y = Volume)) +
geom_boxplot() +
labs(title = "Boxplot of Volume for Each Company", x = "Company", y = "Volume")
ggplot(stock_data, aes(x = Company, y = High)) +
geom_boxplot() +
labs(title = "Boxplot of The Highest Prices for Each Company", x = "Company", y = "The Highest Price")
ggplot(stock_data, aes(x = Company, y = Low)) +
geom_boxplot() +
labs(title = "Boxplot of The Lowest Prices for Each Company", x = "Company", y = "The Lowest Price")
# 为每个公司绘制股价和交易量的散点图
ggplot(stock_data, aes(x = Volume, y = Close.Last, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of Volume vs. Close Price", x = "Volume", y = "Close/Last Price")
# 可视化所有公司股价随时间的变化
ggplot(stock_data, aes(x = Date, y = Close.Last, color = Company)) +
geom_line() +
labs(title = "Stock Price Over Time for All Companies", x = "Date", y = "Close Price") +
theme(legend.position = "bottom")
# 获取公司列表
companies <- unique(stock_data$Company)
library(zoo)
# 设置移动平均的窗口大小，例如30天
window_size <- 30
# 为每个公司创建单独的股价图，包括移动平均线
for (company in unique(stock_data$Company)) {
company_data <- filter(stock_data, Company == company)
# 计算移动平均
company_data$MA <- rollmean(company_data$Close.Last, window_size, align = "right", fill = NA)
# 绘制股价图和移动平均线
p <- ggplot(company_data, aes(x = Date)) +
geom_line(aes(y = Close.Last), color = "blue") +
geom_line(aes(y = MA), color = "red", na.rm = TRUE) +
labs(title = paste(company, "Stock Price with Moving Average"), x = "Date", y = "Close Price") +
theme(legend.position = "bottom")
print(p)
}
# 为相关性分析准备数据
stock_data_wide <- stock_data %>%
select(Date, Company, Close.Last) %>%
spread(key = Company, value = Close.Last)
# 计算相关性
corr_matrix <- cor(stock_data_wide[, -1], use="complete.obs")
# 可视化相关性矩阵
heatmap(corr_matrix, main="Stock Price Correlation Between Companies", Colv=NA, Rowv=NA)
print(corr_matrix)
# 对每个公司的数据进行季节性分解
for (company in unique(stock_data$Company)) {
company_data <- filter(stock_data, Company == company)
# 将价格数据转换为时间序列对象
ts_data <- ts(company_data$Close.Last, frequency=252)  # 假设一年有252个交易日
# STL分解
decomposed <- stl(ts_data, s.window="periodic")
# 提取季节性成分
seasonality <- decomposed$time.series[, "seasonal"]
# 将季节性数据转换为数据框
seasonal_data <- data.frame(Date = company_data$Date, Seasonality = seasonality)
# 绘制季节性图
pic<-ggplot(seasonal_data, aes(x = Date, y = Seasonality)) +
geom_line() +
labs(title = paste(company, "Seasonal Variation in Stock Price"), x = "Date", y = "Seasonality") +
theme(legend.position = "bottom")
print(pic)
}
library(dplyr)
library(ggplot2)
# 计算每个公司的日收益率
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(Return = (Close.Last / lag(Close.Last) - 1) * 100)
# 移除缺失值
stock_data <- na.omit(stock_data)
# 使用ggplot2可视化所有公司的日收益率
ggplot(stock_data, aes(x = Date, y = Return, color = Company)) +
geom_line() +
labs(title = "Daily Stock Returns of All Companies",
x = "Date",
y = "Daily Return (%)") +
theme_minimal() +
theme(legend.position = "bottom")
# 获取所有公司的列表
companies <- unique(stock_data$Company)
# 为每个公司创建一个图
plots_list <- lapply(companies, function(company) {
company_data <- filter(stock_data, Company == company)
ggplot(company_data, aes(x = Date, y = Return)) +
geom_line() +
labs(title = paste("Daily Stock Returns of", company),
x = "Date",
y = "Daily Return (%)") +
theme_minimal()
})
plots_list
View(stock_data)
# 为每个公司绘制股价和交易量的散点图
ggplot(stock_data, aes(x = Volume, y = Close.Last, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of Volume vs. Increase Rate", x = "Volume", y = "increaseRate")
# 为每个公司绘制股价和交易量的散点图
ggplot(stock_data, aes(x = Volume, y = increaseRate, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of Volume vs. Increase Rate", x = "Volume", y = "increaseRate")
#计算每一天开盘价相对于前一天收盘价的差
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(OpenIncreaseRate = (Open-(lag(Close.Last)-1)/(lag(Close.Last)-1)))
#计算每一天开盘价相对于前一天收盘价的差
lag_close <- lag(stock_data$Close.Last)
lag_close
# 计算每个公司的日收益率
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(OpenIncreaseRate = ((Open-lag(Close.Last)) / lag(Close.Last) - 1) * 100)
# 计算每个公司的日收益率
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(OpenIncreaseRate = ((Open-lag(Close.Last)) / lag(Close.Last))
# 计算每个公司的日收益率
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(OpenIncreaseRate = ((Open-lag(Close.Last)) / lag(Close.Last)))
# 计算每个公司的开盘价相对于上一个交易日的涨幅
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(OpenIncreaseRate = ((Open-lag(Close.Last)) / lag(Close.Last)))
# 为每个公司绘制OpenIncreaseRate和涨幅的散点图
ggplot(stock_data, aes(x = OpenIncreaseRate, y = Return, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of OpenIncreaseRate vs. Return", x = "OpenIncreaseRate", y = "Return")
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理：统一日期格式
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
# 清理并转换股票价格和交易量数据：将价格变成数据
price_columns <- c("Close.Last", "Open", "High", "Low")
for (col in price_columns) {
stock_data[[col]] <- as.numeric(gsub("\\$", "", stock_data[[col]]))
}
stock_data$Volume <- as.numeric(gsub(",", "", stock_data$Volume))
# 处理缺失值
# 这里的策略是删除任何包含缺失值的行
stock_data <- na.omit(stock_data)
# 处理异常值，保证所有数据都是非负数
stock_data <- stock_data %>%
filter(Close.Last > 0, Open > 0, High > 0, Low > 0, Volume > 0)
# 数据去重
stock_data <- distinct(stock_data)
# 只关心'Company'和'Date'列的重复值
stock_data <- distinct(stock_data, Company, Date, .keep_all = TRUE)
# 计算每个公司的日收益率
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(increaseRate = ((Close.Last-lag(Close.Last)) / lag(Close.Last)))
# 为每个公司绘制箱线图（以'Close.Last'为例）
ggplot(stock_data, aes(x = Company, y = Close.Last)) +
geom_boxplot() +
labs(title = "Boxplot of Closing Prices for Each Company", x = "Company", y = "Close/Last Price")
ggplot(stock_data, aes(x = Company, y = Volume)) +
geom_boxplot() +
labs(title = "Boxplot of Volume for Each Company", x = "Company", y = "Volume")
ggplot(stock_data, aes(x = Company, y = High)) +
geom_boxplot() +
labs(title = "Boxplot of The Highest Prices for Each Company", x = "Company", y = "The Highest Price")
ggplot(stock_data, aes(x = Company, y = Low)) +
geom_boxplot() +
labs(title = "Boxplot of The Lowest Prices for Each Company", x = "Company", y = "The Lowest Price")
# 为每个公司绘制股价和涨幅的散点图
ggplot(stock_data, aes(x = Volume, y = increaseRate, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of Volume vs. Increase Rate", x = "Volume", y = "increaseRate")
# 按照公司分组，计算相关性系数
result <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
summarise(
correlation_increaseRate_volume = cor(increaseRate, Volume),
correlation_OpenIncreaseRate_increaseRate_lag1 = cor(OpenIncreaseRate, lag(increaseRate, 1))
)
result <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
summarise(
correlation_increaseRate_volume = cor(increaseRate, Volume, use = "complete.obs"),
correlation_OpenIncreaseRate_increaseRate_lag1 = cor(OpenIncreaseRate, lag(increaseRate, 1), use = "complete.obs")
)
# 可视化所有公司股价随时间的变化
ggplot(stock_data, aes(x = Date, y = Close.Last, color = Company)) +
geom_line() +
labs(title = "Stock Price Over Time for All Companies", x = "Date", y = "Close Price") +
theme(legend.position = "bottom")
# 获取公司列表
companies <- unique(stock_data$Company)
library(zoo)
# 设置移动平均的窗口大小，例如30天
window_size <- 30
# 为每个公司创建单独的股价图，包括移动平均线
for (company in unique(stock_data$Company)) {
company_data <- filter(stock_data, Company == company)
# 计算移动平均
company_data$MA <- rollmean(company_data$Close.Last, window_size, align = "right", fill = NA)
# 绘制股价图和移动平均线
p <- ggplot(company_data, aes(x = Date)) +
geom_line(aes(y = Close.Last), color = "blue") +
geom_line(aes(y = MA), color = "red", na.rm = TRUE) +
labs(title = paste(company, "Stock Price with Moving Average"), x = "Date", y = "Close Price") +
theme(legend.position = "bottom")
print(p)
}
# 为相关性分析准备数据
stock_data_wide <- stock_data %>%
select(Date, Company, Close.Last) %>%
spread(key = Company, value = Close.Last)
# 计算相关性
corr_matrix <- cor(stock_data_wide[, -1], use="complete.obs")
# 可视化相关性矩阵
heatmap(corr_matrix, main="Stock Price Correlation Between Companies", Colv=NA, Rowv=NA)
print(corr_matrix)
# 对每个公司的数据进行季节性分解
for (company in unique(stock_data$Company)) {
company_data <- filter(stock_data, Company == company)
# 将价格数据转换为时间序列对象
ts_data <- ts(company_data$Close.Last, frequency=252)  # 假设一年有252个交易日
# STL分解
decomposed <- stl(ts_data, s.window="periodic")
# 提取季节性成分
seasonality <- decomposed$time.series[, "seasonal"]
# 将季节性数据转换为数据框
seasonal_data <- data.frame(Date = company_data$Date, Seasonality = seasonality)
# 绘制季节性图
pic<-ggplot(seasonal_data, aes(x = Date, y = Seasonality)) +
geom_line() +
labs(title = paste(company, "Seasonal Variation in Stock Price"), x = "Date", y = "Seasonality") +
theme(legend.position = "bottom")
print(pic)
}
library(dplyr)
library(ggplot2)
# 计算每个公司的日收益率
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(Return = (Close.Last / lag(Close.Last) - 1) * 100)
# 移除缺失值
stock_data <- na.omit(stock_data)
# 使用ggplot2可视化所有公司的日收益率
ggplot(stock_data, aes(x = Date, y = Return, color = Company)) +
geom_line() +
labs(title = "Daily Stock Returns of All Companies",
x = "Date",
y = "Daily Return (%)") +
theme_minimal() +
theme(legend.position = "bottom")
# 获取所有公司的列表
companies <- unique(stock_data$Company)
# 为每个公司创建一个图
plots_list <- lapply(companies, function(company) {
company_data <- filter(stock_data, Company == company)
ggplot(company_data, aes(x = Date, y = Return)) +
geom_line() +
labs(title = paste("Daily Stock Returns of", company),
x = "Date",
y = "Daily Return (%)") +
theme_minimal()
})
plots_list
# 计算每个公司的开盘价相对于上一个交易日的涨幅
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(OpenIncreaseRate = ((Open-lag(Close.Last)) / lag(Close.Last)))
# 为每个公司绘制OpenIncreaseRate和涨幅的散点图
ggplot(stock_data, aes(x = OpenIncreaseRate, y = Return, color = Company)) +
geom_point() +
labs(title = "Scatter Plot of OpenIncreaseRate vs. Return", x = "OpenIncreaseRate", y = "Return")
result <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
summarise(
correlation_increaseRate_volume = cor(increaseRate, Volume, use = "complete.obs"),
correlation_OpenIncreaseRate_increaseRate_lag1 = cor(OpenIncreaseRate, lag(increaseRate, 1), use = "complete.obs")
)
# 输出结果
print(result)
# 计算相关性
correlation <- cor(stock_data$OpenIncreaseRate, stock_data$IncreaseRate, use = "complete.obs")
# 计算相关性
correlation <- cor(stock_data[c("OpenIncreaseRate", "IncreaseRate")], use = "complete.obs")
# 计算相关性
my_data<-select(stock_data,Close.Last,Volume,OpenIncreaseRate,IncreaseRate)
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理：统一日期格式
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
# 清理并转换股票价格和交易量数据：将价格变成数据
price_columns <- c("Close.Last", "Open", "High", "Low")
for (col in price_columns) {
stock_data[[col]] <- as.numeric(gsub("\\$", "", stock_data[[col]]))
}
stock_data$Volume <- as.numeric(gsub(",", "", stock_data$Volume))
# 处理缺失值
# 这里的策略是删除任何包含缺失值的行
stock_data <- na.omit(stock_data)
# 处理异常值，保证所有数据都是非负数
stock_data <- stock_data %>%
filter(Close.Last > 0, Open > 0, High > 0, Low > 0, Volume > 0)
# 数据去重
stock_data <- distinct(stock_data)
# 只关心'Company'和'Date'列的重复值
stock_data <- distinct(stock_data, Company, Date, .keep_all = TRUE)
#计算每天股票的涨幅
stock_data <- stock_data %>%
mutate(increaseRate = (Close.Last - Open) / Open)
# 为每个公司绘制箱线图（以'Close.Last'为例）
ggplot(stock_data, aes(x = Company, y = Close.Last)) +
geom_boxplot() +
labs(title = "Boxplot of Closing Prices for Each Company", x = "Company", y = "Close/Last Price")
ggplot(stock_data, aes(x = Company, y = Volume)) +
geom_boxplot() +
labs(title = "Boxplot of Volume for Each Company", x = "Company", y = "Volume")
ggplot(stock_data, aes(x = Company, y = High)) +
geom_boxplot() +
labs(title = "Boxplot of The Highest Prices for Each Company", x = "Company", y = "The Highest Price")
ggplot(stock_data, aes(x = Company, y = Low)) +
geom_boxplot() +
labs(title = "Boxplot of The Lowest Prices for Each Company", x = "Company", y = "The Lowest Price")
# 安装和加载必要的库
library(ggplot2)
library(dplyr)
library(tidyr)
# 读取数据
stock_data <- read.csv("stock.csv", stringsAsFactors = FALSE)
# 数据预处理：统一日期格式
stock_data$Date <- as.Date(stock_data$Date, format="%m/%d/%Y")
# 清理并转换股票价格和交易量数据：将价格变成数据
price_columns <- c("Close.Last", "Open", "High", "Low")
for (col in price_columns) {
stock_data[[col]] <- as.numeric(gsub("\\$", "", stock_data[[col]]))
}
stock_data$Volume <- as.numeric(gsub(",", "", stock_data$Volume))
# 处理缺失值
# 这里的策略是删除任何包含缺失值的行
stock_data <- na.omit(stock_data)
# 处理异常值，保证所有数据都是非负数
stock_data <- stock_data %>%
filter(Close.Last > 0, Open > 0, High > 0, Low > 0, Volume > 0)
# 数据去重
stock_data <- distinct(stock_data)
# 只关心'Company'和'Date'列的重复值
stock_data <- distinct(stock_data, Company, Date, .keep_all = TRUE)
# 计算每个公司的日收益率
stock_data <- stock_data %>%
group_by(Company) %>%
arrange(Company, Date) %>%
mutate(IncreaseRate = ((Close.Last-lag(Close.Last)) / lag(Close.Last)))
# 为每个公司绘制箱线图（以'Close.Last'为例）
ggplot(stock_data, aes(x = Company, y = Close.Last)) +
geom_boxplot() +
labs(title = "Boxplot of Closing Prices for Each Company", x = "Company", y = "Close/Last Price")
ggplot(stock_data, aes(x = Company, y = Volume)) +
geom_boxplot() +
labs(title = "Boxplot of Volume for Each Company", x = "Company", y = "Volume")
